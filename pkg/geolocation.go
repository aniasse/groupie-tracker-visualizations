package pkg

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

type Copyright struct {
	Text         string `json:"text"`
	ImageURL     string `json:"imageUrl"`
	ImageAltText string `json:"imageAltText"`
}

type Infos struct {
	Statuscode int           `json:"statuscode"`
	Copyrights Copyright     `json:"copyright"`
	Messages   []interface{} `json:"messages"`
}

type Options struct {
	MaxResults        int  `json:"maxResults"`
	IgnoreLatLngInput bool `json:"ignoreLatLngInput"`
}
type ProvidedLocation struct {
	Location string `json:"location"`
}
type LatLng struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}
type DisplayLatLng struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}
type Locations []struct {
	Street             string        `json:"street"`
	AdminArea6         string        `json:"adminArea6"`
	AdminArea6Type     string        `json:"adminArea6Type"`
	AdminArea5         string        `json:"adminArea5"`
	AdminArea5Type     string        `json:"adminArea5Type"`
	AdminArea4         string        `json:"adminArea4"`
	AdminArea4Type     string        `json:"adminArea4Type"`
	AdminArea3         string        `json:"adminArea3"`
	AdminArea3Type     string        `json:"adminArea3Type"`
	AdminArea1         string        `json:"adminArea1"`
	AdminArea1Type     string        `json:"adminArea1Type"`
	PostalCode         string        `json:"postalCode"`
	GeocodeQualityCode string        `json:"geocodeQualityCode"`
	GeocodeQuality     string        `json:"geocodeQuality"`
	DragPoint          bool          `json:"dragPoint"`
	SideOfStreet       string        `json:"sideOfStreet"`
	LinkID             string        `json:"linkId"`
	UnknownInput       string        `json:"unknownInput"`
	Type               string        `json:"type"`
	MyLatLng           LatLng        `json:"latLng"`
	MyDisplayLatLng    DisplayLatLng `json:"displayLatLng"`
	MapURL             string        `json:"mapUrl"`
}

type Results struct {
	MyProvidedLocation ProvidedLocation `json:"providedLocation"`
	MyLocation         Locations        `json:"locations"`
}

type AutoGenerated struct {
	MyInfo    Infos     `json:"info"`
	MyOptions Options   `json:"options"`
	MyResults []Results `json:"results"`
}

type Cordonnate struct {
	City map[string][]string
	Long float64
	Lat  float64
}

const googleApiUri = "https://www.mapquestapi.com/geocoding/v1/address?key=xAZUGrTYJlvhcrVt6jKcQKjEguobPA9K&location="

func GetCityCoordinates(city string) AutoGenerated {

	resp, err := http.Get(googleApiUri + city)

	if err != nil {
		log.Fatal("Erreur lors de la reuperation des donnees de l'api google: ", err)
	}

	bytes, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()

	if err != nil {
		log.Fatal("Erreur de lecture des donnees de l'api google: ", err)
	}

	var data AutoGenerated

	er := json.Unmarshal(bytes, &data)
	if er != nil {
		fmt.Println("Erreur lors du decodage", er)
	}

	return data
}
